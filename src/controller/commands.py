from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from loguru import logger
import prettytable as pt

from model import model, db


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç <b>{user.first_name}!</b>\n"
        f"‚òùÔ∏è –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–∞—Ä—ã"
        f" –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
        f"  <b>/set symbol price</b>\n"
        f"‚òùÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞–±–µ—Ä–∏ <b>/list</b>",
    )


async def set(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    args = context.args
    try:
        parms = dict(zip(("symbol", "price"), (args[0], args[1])))
        model_set = model.AlarmSetModel(**{**(user.to_dict()), **parms})
    except Exception:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã /set.")
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã set"
            "\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ /help"
            "\n–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.",
        )
    else:
        try:
            with Session(db.get_engine()) as session:
                row = model.AlarmSetORM(**(model_set.dict()))
                session.add(row)
                session.commit()

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            )
        else:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞–ª—å {model_set.username}"
                f" —Å id {model_set.id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                f" {model_set.symbol} -> {model_set.price}.",
            )
            await update.message.reply_text("üëç")
            await update.message.reply_text(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {model_set.symbol}"
                f" üëâ  {model_set.price}"
                f" —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
            )


async def tlst(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    with Session(db.get_engine()) as session:
        stmt = session.query(model.AlarmSetORM).all()
        model_stmt = [model.AlarmSetModel.from_orm(row) for row in stmt]
        if len(model_stmt) > 0:
            table = pt.PrettyTable(["–ü–∞—Ä–∞", "–¶–µ–Ω–∞", "–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"])
            table.align["–ü–∞—Ä–∞"] = "l"
            table.align["–¶–µ–Ω–∞"] = "l"
            for item in model_stmt:
                table.add_row(
                    [
                        item.symbol,
                        f"{item.price}",
                        f"{(item.created_at).strftime('%d-%m-%Y %H:%M')}",
                    ]
                )

        await update.message.reply_text(f"<pre>{table}</pre>")


async def lst(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    with Session(db.get_engine()) as session:
        stmt = session.query(model.AlarmSetORM).all()
        model_stmt = [model.AlarmSetModel.from_orm(row) for row in stmt]
        if len(model_stmt) > 0:
            lst = ""
            for item in model_stmt:
                lst += (
                    f"üîñ{(item.symbol).ljust(8)}üëâ {(str(item.price)).ljust(9)}"
                    f"üóì{(item.created_at).strftime('%d-%m-%Y %H:%M')}\n"
                )
        await update.message.reply_text(f"<pre>{lst}</pre>")
        

async def slst(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    with Session(db.get_engine()) as session:
        stmt = session.query(model.AlarmSetORM).all()
        model_stmt = [model.AlarmSetModel.from_orm(row) for row in stmt]
        if len(model_stmt) > 0:
            lst = ""
            for item in model_stmt:
                lst += (
                    f"üîñ{(item.symbol).ljust(8)}üëâ {(str(item.price)).ljust(9)}\n"
                )
        await update.message.reply_text(f"<pre>{lst}</pre>")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"{update.message.text}")
